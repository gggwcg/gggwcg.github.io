
#get_current_dir-------------------------------------------------------------------------------
import os

#获取当前目录,包含最后的斜杠
def get_current_dir():
	current_path = os.path.abspath(__file__)
	parent_path = os.path.dirname(current_path) + os.path.sep
	return parent_path


#file_clean-------------------------------------------------------------------------------
import os

#清理dir目录下的日志文件, 保留count个
def file_clean(dir, count):
	l_files = os.listdir(dir)
	dict = {}
	for f in l_files:
		full_path = os.path.join(dir, f)
		ctime = os.path.getctime(full_path)
		dict[full_path] = ctime
	l_files_sort = sorted(dict.items(), key=lambda item: item[1]) #按照ctime排序
	if len(l_files_sort) > count:
		for i in range(len(l_files_sort) - count):
			os.remove(l_files_sort[i][0])


#watchdog-------------------------------------------------------------------------------
#pip install watchdog
from watchdog.observers import Observer
from watchdog.events import *
import time

class FileEventHandler(FileSystemEventHandler):
    def __init__(self):
        FileSystemEventHandler.__init__(self)

    def on_moved(self, event):
        if event.is_directory:
            print("directory moved from {0} to {1}".format(event.src_path,event.dest_path))
        else:
            print("file moved from {0} to {1}".format(event.src_path,event.dest_path))

    def on_created(self, event):
        if event.is_directory:
            print("directory created:{0}".format(event.src_path))
        else:
            print("file created:{0}".format(event.src_path))

    def on_deleted(self, event):
        if event.is_directory:
            print("directory deleted:{0}".format(event.src_path))
        else:
            print("file deleted:{0}".format(event.src_path))

    def on_modified(self, event):
        if event.is_directory:
            print("directory modified:{0}".format(event.src_path))
        else:
            print("file modified:{0}".format(event.src_path))

if __name__ == "__main__":
    observer = Observer()
    event_handler = FileEventHandler()
    dir = "d://watch//"
    observer.schedule(event_handler,dir,True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
